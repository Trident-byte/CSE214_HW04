/** 
 * The <code>KeyTable</code> creates a key
 * to decrypt and encrypt a message. It is also
 * referenced by other programs during the encryption
 * and decryption process.
 * 
 * @author Brian Chau
 *    email brian.chau@stonybrook.edu
 *    Stony Brook ID: 116125954  
 *    Recitation: 02
**/
public class KeyTable{
    private char[][] key;

    /**
     * Creates an empty KeyTable
     */
    public KeyTable(){
        key = new char[5][5];
    }

    /**
     * Creates a key based on a given phrase 
     * 
     * @param phrase
     *    Phrase used to generate key
     * @return
     *    Returns a new KeyTable object with a full key table
     */
    public static KeyTable buildFromString(String phrase){
        boolean[] alphabet;
        alphabet = new boolean[26];
        KeyTable keyTable = new KeyTable();
        int charsUsed = 0;
        for(int i = 0; i < phrase.length(); i++){
            char letter = phrase.charAt(i);
            int pos = (int) letter;
            if(!alphabet[pos - 'a']){
                keyTable.key[charsUsed/5][charsUsed%5] = letter;
                alphabet[pos - 'a'] = true;
                charsUsed++;
            }
        }
        for(int i = 0; i < alphabet.length; i++){
            char letter = (char) (i + 'a');
            if(!alphabet[i] && letter != 'j'){
                keyTable.key[charsUsed/5][charsUsed%5] = letter;
            }
        }
        return keyTable;
    }

    /**
     * Returns the key generated by the <code>KeyTable</code>
     * 
     * @return
     *    Returns the key generated by the <code>KeyTable</code>
     */
    public char[][] getKeyTable(){
        return key;
    }

    /**
     * Sets the key of the keytable based on a 2-d char array
     * 
     * @param key
     *    New value of the key field
     */
    public void setKeyTable(char[][] key){
        this.key = key;
    }


}